#!/usr/bin/env escript
%% -*- erlang -*-
%%! -smp enable -name so_bench -mnesia debug verbose -pa ebin -pa ../amf/ebin
-mode(compile).
-define(COUNTER, 10000).

main([]) ->
  io:format("so_bench url name [count]~n"),
  ok;

main([URL, Name]) ->
  main([URL, Name, "10"]);
  
main([URL, Name, CountS]) ->
  application:start(rtmp),
  {ok, Re} = re:compile("([^:]+)://([^/:]+):(\\d+)/(.*)"),
  process_flag(trap_exit, true),
  {match, [_, _Protocol, Server, Port, Path]} = re:run(URL, Re, [{capture, all, list}]),
  Count = list_to_integer(CountS),
  spawn(fun() ->
    register(counter, self()),
    counter(0)
  end),
  start_spawner(Server, list_to_integer(Port), list_to_binary(Path), list_to_binary(Name), Count, 0).
  
  
counter(Count) ->
  receive
    tick -> 
      case Count rem ?COUNTER of
        1 -> statistics(wall_clock);
        0 -> 
          {_, Time} = statistics(wall_clock),
          Speed = (catch round(?COUNTER*1000/Time)),
          io:format("~p sync/sec ~p~n", [Speed, Count]);
        _ -> ok
      end,
      counter(Count + 1);
    Else -> Else
  end.
  
start_spawner(Server, Port, Path, Name, Count, Number) when Number < Count ->
  io:format("Starting client ~s ~p ~s ~s ~p~n", [Server, Port, Path, Name, Number]),
  spawn_link(fun() -> init_rtmp_client(Server, Port, Path, Name) end),
  timer:sleep(5),
  start_spawner(Server, Port, Path, Name, Count, Number + 1);

start_spawner(Server, Port, Path, Name, Count, Count) ->
  receive
    {'EXIT', _Pid, _Reason} ->
      io:format("Dead client ~p~n", [_Reason]),
      start_spawner(Server, Port, Path, Name, Count, Count - 1);
    Else ->
      io:format("Spawner message: ~p~n", [Else]),
      start_spawner(Server, Port, Path, Name, Count, Count)
  end.
  
init_rtmp_client(Server, Port, Path, Name) ->
  {ok, Socket} = gen_tcp:connect(Server, Port, [binary, {active, false}, {packet, raw}]),
  io:format("Socket opened to ~s~n", [Server]),
  {ok, RTMP} = rtmp_socket:connect(Socket),
  rtmp_socket:setopts(RTMP, [{active, true}]),
  io:format("Connected to ~s~n", [Server]),
  receive 
    {rtmp, RTMP, connected} ->
      so_connect(RTMP, Path, Name),
      rtmp_client(RTMP, Path, Name, 1)
  after
    10000 ->
      io:format("Client timeout~n"),
      ok
  end.
  
rtmp_client(RTMP, Path, Name, Count) ->
  so_sync(RTMP, Name, Count),
  counter ! tick,
  % timer:sleep(50),
  flush_messages(RTMP),
  rtmp_client(RTMP, Path, Name, Count+1).

flush_messages(RTMP) ->
  receive
    {rtmp, RTMP, _Message} -> 
      flush_messages(RTMP);
    Msg -> 
      io:format("Unknown message ~p~n", [Msg])
  after
    0 -> ok
  end.
    


so_connect(RTMP, Path, Name) -> 
  Connect = rtmp_lib:connect(RTMP, [{app, <<"default">>}]),
  Reply = rtmp_lib:shared_object_connect(RTMP, Name),
  io:format("Connected to ~s ~s~n", [Path, Name]).
  
so_sync(RTMP, Name, Count) ->
  Value = random:uniform(),
  Key = <<"prop">>,
  rtmp_lib:shared_object_set(RTMP, Name, Key, Value).
  